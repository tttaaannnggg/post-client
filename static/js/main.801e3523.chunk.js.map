{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["url","EditSelector","props","setMaxPost","maxPost","setPostSelection","postSelection","useEffect","fetch","then","res","json","data","id","selections","i","push","value","key","className","defaultValue","onChange","e","target","App","useState","passVal","setPassVal","postState","setPostState","text","setText","title","setTitle","postId","setPostId","placeholder","onClick","page","console","log","response","length","post","body","catch","err","error","getPost","type","pass","author","Number","localStorage","setItem","JSON","stringify","postStatus","set","destination","method","mode","headers","setTimeout","submitPost","get","ok","rows","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","message"],"mappings":"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","file":"static/js/main.801e3523.chunk.js","sourcesContent":["import React, {useEffect, useState} from 'react';\nimport './App.css';\nconst url = 'https://ttaanngg.com';\n\nfunction App() {\n  const [passVal, setPassVal] = useState('');\n  const [postState, setPostState] = useState(false);\n  const [text, setText] = useState('');\n  const [title, setTitle] = useState('');\n  const [postId, setPostId] = useState(0);\n  const [maxPost, setMaxPost] = useState(0);\n  const [postSelection, setPostSelection] = useState(0);\n  return (\n    <div className=\"App\">\n      <div className=\"header\">\n        <input placeholder='title' className=\"Editor-Title\" value={title}onChange={\n          (e)=>{\n            setTitle(e.target.value);\n          }\n        }></input>\n        <div className=\"Editor-Cluster\">\n          <p className=\"Editor-Post-Indicator\">{postId === 0 || postId === '0' ? 'new post' : 'editing post ' +postId}</p>\n          <div>\n          <EditSelector setMaxPost={setMaxPost} maxPost={maxPost} postSelection={postSelection} setPostSelection={setPostSelection} />\n          <button onClick={()=>{getPost(postSelection,{setText, setTitle, setPostId})}}>edit post</button>\n        </div>\n        <div>\n          <input className=\"Editor-Input\" type=\"password\" placeholder='password' value={passVal} onChange={\n            (e)=>{\n              setPassVal(e.target.value)\n            }\n          }></input> \n          <button onClick={()=>{\n            if(!text.length || postState || !passVal){\n              return;\n            }\n            const data = {body: text, pass:passVal, title:title, author: 'tang', id:Number(postId)}\n            localStorage.setItem('lastPost', JSON.stringify(data));\n            submitPost(data, {get:postState, set:setPostState}).then(res=>{\n              if(res.ok){\n                console.log('posted')\n                setText('');\n              }else{\n                console.log('failed to post')\n              }\n          })\n        }}>\n            submit post\n          </button>\n        </div>\n      </div>\n    </div>\n      <textarea className=\"Editor-Body\" rows=\"50\" value={text} onChange={\n        (e)=>{\n          setText(e.target.value);\n        }\n      }/>\n    </div>\n  );\n}\n\nfunction EditSelector(props){\n  const {setMaxPost, maxPost, postSelection, setPostSelection} = props;\n  useEffect(\n    ()=>{\n      if(maxPost === 0 || maxPost === '0'){\n        fetch(`${url}/api/posts/0`)\n          .then(res=>res.json())\n          .then(data=>{\n            setMaxPost(data[0].id)\n          })\n      }\n    }\n  )\n  const selections = []\n  for(let i = 1; i <= maxPost; i++){\n    selections.push(<option value={i} key={'option' + i}>{i}</option>)\n  }\n  selections.push(<option value={0} key='new' >new</option>)\n  return(<select className=\"Editor-Input\" defaultValue={0} onChange={(e)=>{setPostSelection(e.target.value)}}>\n    {selections}\n    </select>)\n}\n\nfunction submitPost(data, postStatus){\n  postStatus.set(true);\n  const destination = `${url}/api/posts/${data.id ||''}`;\n  console.log('submitting to', destination)\n  return fetch(destination, {\n    method: 'POST',\n    mode: 'cors',\n    body: JSON.stringify(data),\n    headers: {\n      'Content-Type': 'application/json'\n    }\n  })\n  .then(res=>{\n    console.log('sent!')\n    setTimeout(()=>postStatus.set(false), 1000);\n    return res;\n  })\n} \n\nfunction getPost(postId, page={setText:null, setTitle:null, setPostId:null}){\n  if(postId === 0 || postId === '0'){\n    page.setText('');\n    page.setTitle('');\n    return\n  }\n  console.log('fetching to', `${url}/api/posts/${postId}`)\n  fetch(`${url}/api/posts/${postId}`)\n    .then(response=>response.json())\n    .then(data=>{\n      console.log(data);\n      if(data.length){\n        const post = data[0];\n        page.setText(post.body);\n        page.setTitle(post.title||'');\n        page.setPostId(post.id);\n      }\n    })\n    .catch(err=>console.error('err fetching post', err))\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}